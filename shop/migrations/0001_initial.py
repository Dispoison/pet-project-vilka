# Generated by Django 3.2.5 on 2021-07-30 13:14

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_products', models.PositiveIntegerField(default=0)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Общая цена')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, unique=True, verbose_name='Категория')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='URL')),
                ('image', models.ImageField(null=True, upload_to='photos/%Y/%m/%d/', verbose_name='Изображение')),
                ('image_large', models.ImageField(null=True, upload_to='photos/%Y/%m/%d/', verbose_name='Большое изображение')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='URL')),
                ('price', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Цена')),
                ('discounted_price', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True, verbose_name='Цена со скидкой')),
                ('photo', models.ImageField(upload_to='photos/%Y/%m/%d/', verbose_name='Изображение')),
                ('description', models.TextField(null=True, verbose_name='Описание')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_shop.product_set+', to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Monitor',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='shop.product')),
                ('diagonal', models.CharField(max_length=100, verbose_name='Диагональ')),
                ('frequency', models.PositiveSmallIntegerField(verbose_name='Частота обновления')),
                ('resolution', models.CharField(max_length=50, verbose_name='Разрешение дисплея')),
                ('matrix_type', models.CharField(max_length=50, verbose_name='Тип матрицы')),
            ],
            options={
                'verbose_name': 'Монитор',
                'verbose_name_plural': 'Мониторы',
            },
            bases=('shop.product',),
        ),
        migrations.CreateModel(
            name='Monoblock',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='shop.product')),
                ('diagonal', models.CharField(max_length=100, verbose_name='Диагональ')),
                ('display', models.CharField(max_length=100, verbose_name='Дисплей')),
                ('processor', models.CharField(max_length=100, verbose_name='Процессор')),
                ('ram', models.CharField(max_length=50, verbose_name='Оперативная память')),
                ('disk', models.CharField(max_length=50, verbose_name='Накопитель данных')),
                ('videocard', models.CharField(max_length=100, verbose_name='Видеокарта')),
                ('weight', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Вес')),
            ],
            options={
                'verbose_name': 'Моноблок',
                'verbose_name_plural': 'Моноблоки',
            },
            bases=('shop.product',),
        ),
        migrations.CreateModel(
            name='Notebook',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='shop.product')),
                ('diagonal', models.CharField(max_length=100, verbose_name='Диагональ')),
                ('display', models.CharField(max_length=100, verbose_name='Дисплей')),
                ('processor', models.CharField(max_length=100, verbose_name='Процессор')),
                ('ram', models.CharField(max_length=50, verbose_name='Оперативная память')),
                ('disk', models.CharField(max_length=50, verbose_name='Накопитель данных')),
                ('videocard', models.CharField(max_length=100, verbose_name='Видеокарта')),
            ],
            options={
                'verbose_name': 'Ноутбук',
                'verbose_name_plural': 'Ноутбуки',
            },
            bases=('shop.product',),
        ),
        migrations.CreateModel(
            name='Smartphone',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='shop.product')),
                ('internet', models.CharField(max_length=100, verbose_name='Стандарт связи')),
                ('diagonal', models.CharField(max_length=100, verbose_name='Диагональ')),
                ('display', models.CharField(max_length=100, verbose_name='Дисплей')),
                ('processor', models.CharField(max_length=100, verbose_name='Процессор')),
                ('sim_number', models.PositiveSmallIntegerField(verbose_name='Количество СИМ-карт')),
                ('sim_size', models.CharField(max_length=50, verbose_name='Размер СИМ-карт')),
                ('ram', models.CharField(max_length=50, verbose_name='Оперативная память')),
                ('memory', models.CharField(max_length=50, verbose_name='Встроенная память')),
                ('accum_volume', models.CharField(max_length=50, verbose_name='Объем аккумулятора')),
            ],
            options={
                'verbose_name': 'Смартфон',
                'verbose_name_plural': 'Смартфоны',
            },
            bases=('shop.product',),
        ),
        migrations.CreateModel(
            name='SmartphoneAccessory',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='shop.product')),
                ('form_factor', models.CharField(max_length=50, verbose_name='Форм фактор')),
                ('material', models.CharField(max_length=50, verbose_name='Материал')),
                ('color', models.CharField(max_length=50, verbose_name='Цвет')),
                ('compatible_model', models.CharField(max_length=100, verbose_name='Совместимая модель')),
            ],
            options={
                'verbose_name': 'Аксессуар для смартфона',
                'verbose_name_plural': 'Аксессуары для смартфона',
            },
            bases=('shop.product',),
        ),
        migrations.CreateModel(
            name='SystemUnit',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='shop.product')),
                ('processor', models.CharField(max_length=100, verbose_name='Процессор')),
                ('ram', models.CharField(max_length=50, verbose_name='Оперативная память')),
                ('disk', models.CharField(max_length=50, verbose_name='Накопитель данных')),
                ('videocard', models.CharField(max_length=100, verbose_name='Видеокарта')),
                ('weight', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Вес')),
                ('power', models.PositiveSmallIntegerField(verbose_name='Мощность БП')),
                ('dimensions', models.CharField(max_length=100, verbose_name='Габаритные размеры')),
            ],
            options={
                'verbose_name': 'Системный блок',
                'verbose_name_plural': 'Системные блоки',
            },
            bases=('shop.product',),
        ),
        migrations.CreateModel(
            name='Tablet',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='shop.product')),
                ('internet', models.CharField(max_length=100, verbose_name='Стандарт связи')),
                ('diagonal', models.CharField(max_length=100, verbose_name='Диагональ')),
                ('display', models.CharField(max_length=100, verbose_name='Дисплей')),
                ('processor', models.CharField(max_length=100, verbose_name='Процессор')),
                ('sim_number', models.PositiveSmallIntegerField(verbose_name='Количество СИМ-карт')),
                ('sim_size', models.CharField(max_length=50, verbose_name='Размер СИМ-карт')),
                ('ram', models.CharField(max_length=50, verbose_name='Оперативная память')),
                ('memory', models.CharField(max_length=50, verbose_name='Встроенная память')),
                ('accum_volume', models.CharField(max_length=50, verbose_name='Объем аккумулятора')),
                ('weight', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Вес')),
            ],
            options={
                'verbose_name': 'Планшет',
                'verbose_name_plural': 'Планшеты',
            },
            bases=('shop.product',),
        ),
        migrations.CreateModel(
            name='TabletAccessory',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='shop.product')),
                ('form_factor', models.CharField(max_length=50, verbose_name='Форм фактор')),
                ('material', models.CharField(max_length=50, verbose_name='Материал')),
                ('color', models.CharField(max_length=50, verbose_name='Цвет')),
                ('tablet_diagonal', models.CharField(max_length=100, verbose_name='Диагональ планшета')),
            ],
            options={
                'verbose_name': 'Аксессуар для планшета',
                'verbose_name_plural': 'Аксессуары для планшета',
            },
            bases=('shop.product',),
        ),
        migrations.CreateModel(
            name='Subcategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, unique=True, verbose_name='Категория')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='URL')),
                ('image', models.ImageField(blank=True, null=True, upload_to='photos/%Y/%m/%d/', verbose_name='Изображение')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='shop.category', verbose_name='Подкатегория')),
            ],
            options={
                'verbose_name': 'Подкатегория',
                'verbose_name_plural': 'Подкатегории',
            },
        ),
        migrations.AddField(
            model_name='product',
            name='subcategory',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='shop.subcategory', verbose_name='Подкатегория'),
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(max_length=20, verbose_name='Номер телефона')),
                ('address', models.CharField(max_length=255, verbose_name='Адрес')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Покупатель',
                'verbose_name_plural': 'Покупатели',
            },
        ),
        migrations.CreateModel(
            name='CartProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Общая цена')),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_products', to='shop.cart', verbose_name='Корзина')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.customer', verbose_name='Покупатель')),
            ],
        ),
        migrations.AddField(
            model_name='cart',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.customer', verbose_name='Владелец'),
        ),
        migrations.AddField(
            model_name='cart',
            name='products',
            field=models.ManyToManyField(blank=True, related_name='related_cart', to='shop.CartProduct'),
        ),
    ]
